/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Login.Procesador;
import javax.swing.JOptionPane;
import Login.PlacaMadre;
import Login.MemoriaRAM;
import Login.TarjetaVideo;
import Login.DiscoDuro;
import static GUI.Login.r;
import Login.Inventario;
import Login.Menu;
import Login.Empresa;
import java.util.ArrayList;
import java.util.Iterator;
/**
 *
 * @author ok
 */
public class DispositivosCotizar extends javax.swing.JFrame {

    public static ArrayList<PlacaMadre> Placa; 
    public static ArrayList<Procesador> Procesador;
    public static ArrayList<MemoriaRAM> Memoria;
    public static ArrayList<TarjetaVideo> Tarjeta;
    public static ArrayList<DiscoDuro> Disco; 
    
    public DispositivosCotizar() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
    }
    
    Menu m = new Menu();
    Inventario i;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Placa Madre");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Tarjeta de video");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Procesador");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Memoria RAM");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Disco duro");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel1.setText(" DISPOSITIVOS ");

        jButton6.setText("Volver al menu");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(jButton2)
                .addGap(160, 160, 160)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(126, 126, 126)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(91, 91, 91))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(70, 70, 70))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel1)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addGap(54, 54, 54)
                .addComponent(jButton6)
                .addGap(65, 65, 65))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String cotizar = JOptionPane.showInputDialog("Ingrese la cantidad de dinero con la cual desea cotizar ");
        if(cotizar!=null){
        double cotizarD = Double.parseDouble(cotizar); 
        m.insertarEmpresasInventario();
        ArrayList<Empresa> e1 = m.getListaE();
        JOptionPane.showMessageDialog(null,"Mostrando los dispositivos en base a la cotizacion ");
        Iterator <Empresa> it = e1.iterator();
        Empresa e = null;
        Inventario i = null;
        int cantidad=0;
        ArrayList<PlacaMadre> aux = new ArrayList<PlacaMadre>();
        while(it.hasNext()){
        e = it.next();
        i = e.getInv();
        ArrayList<PlacaMadre> p = new ArrayList<PlacaMadre>();
        // El metodo es para leer en el archivo de las placas madres que se venderan por defecto en la empresa.
        i.PlacaMadreDefecto(e);
        p = i.rescatarArrayListPlacaMadre(e);
        Iterator<PlacaMadre> itp = p.iterator();
        PlacaMadre pM = null;
            while(itp.hasNext()){
            pM = itp.next();
            if(pM.getPrecio()<cotizarD){
            aux.add(pM);
                                    /*
                                    A traves del arraylist pMcotiza llenamos los objetos del cual el programa nos ha podido cotizar
                                    independientemente al tipo de empresa a la cual pertenece
             /*                       *//*
            pMcotiza.add(pM);
            numObjetosCotizados++;
            */cantidad++;
                  }
             }
         }
        Placa = aux;
        if(cantidad==0){
             JOptionPane.showMessageDialog(null," No hay dispositivos disponibles para ese presupuesto");
        }else{
            MostrarArrayListCotizados a = new  MostrarArrayListCotizados();
            a.setVisible(true);
            dispose();
        }}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        InterfazCliente i = new InterfazCliente();
        i.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String cotizar = JOptionPane.showInputDialog("Ingrese la cantidad de dinero con la cual desea cotizar ");
        if(cotizar!=null){
        double cotizarD = Double.parseDouble(cotizar); 
        m.insertarEmpresasInventario();
        ArrayList<Empresa> e1 = m.getListaE();
        // Para obtener la lista de las empresas 
        JOptionPane.showMessageDialog(null,"Mostrando los dispositivos en base a la cotizacion ");
        Iterator <Empresa> it = e1.iterator();
        Empresa e = null;
        Inventario i = null;
        int cantidad=0;
        // Para almacenar los dispositivos que cumplen con el monto de la cotizacion
        ArrayList<Procesador> aux = new ArrayList<Procesador>();
        while(it.hasNext()){
          e = it.next();
          i = e.getInv();
        ArrayList<Procesador> p = new ArrayList<Procesador>();
        // El metodo es para leer en el archivo de las placas madres que se venderan por defecto en la empresa.
        i.ProcesadoresDefecto(e);
        p = i.rescatarArrayListProcesador(e);
        Iterator<Procesador> itp = p.iterator();
        // Recorremos el arraylist de cada empresa para saber cuales son los dispositivos que cumplen con el monto digitado por el registrado
        Procesador pM = null;
            while(itp.hasNext()){
              pM = itp.next();
              if(pM.getPrecio()<cotizarD){
                  aux.add(pM);
                                    /*
                                    A traves del arraylist pMcotiza llenamos los objetos del cual el programa nos ha podido cotizar
                                    independientemente al tipo de empresa a la cual pertenece
             /*                       *//*
            pMcotiza.add(pM);
            numObjetosCotizados++;
    //Esta es la cantidad de dispositivos que si cumplen con la cotizacion, es decir son mayores que la cotizacion
            */   cantidad++;
               }
             }
         }
        //Con esto hacemos que el arrayList placa puede ser trasladado a la siguiente interfaz con todos los elementos dentro de ella
        Procesador = aux;
        if(cantidad==0){
            // Si la cantidad es 0 es por que ningún articulo cumplio con la cotización.
             JOptionPane.showMessageDialog(null," No hay dispositivos disponibles para ese presupuesto");
        }else{
            // Si hay al menos 1 articulo que 
            System.out.println(" cantidad "+ cantidad);
            MostrarArrayCotizadosProcesador a = new  MostrarArrayCotizadosProcesador();
            a.setVisible(true);
            dispose();
        }}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //Disco duro
        String cotizar = JOptionPane.showInputDialog("Ingrese la cantidad de dinero con la cual desea cotizar ");
        if(cotizar!=null){
        double cotizarD = Double.parseDouble(cotizar); 
        m.insertarEmpresasInventario();
        ArrayList<Empresa> e1 = m.getListaE();
        // Para obtener la lista de las empresas 
        JOptionPane.showMessageDialog(null,"Mostrando los dispositivos en base a la cotizacion ");
        Iterator <Empresa> it = e1.iterator();
        Empresa e = null;
        Inventario i = null;
        int cantidad=0;
        // Para almacenar los dispositivos que cumplen con el monto de la cotizacion
        ArrayList<DiscoDuro> aux = new ArrayList<DiscoDuro>();
        while(it.hasNext()){
          e = it.next();
          i = e.getInv();
        ArrayList<DiscoDuro> p = new ArrayList<DiscoDuro>();
        // El metodo es para leer en el archivo de las placas madres que se venderan por defecto en la empresa.
        i.DiscoDuroDefecto(e);
        p = i.rescatarArrayListDiscoDuro(e);
        Iterator<DiscoDuro> itp = p.iterator();
        // Recorremos el arraylist de cada empresa para saber cuales son los dispositivos que cumplen con el monto digitado por el registrado
        DiscoDuro pM = null;
            while(itp.hasNext()){
              pM = itp.next();
              if(pM.getPrecio()<cotizarD){
                  aux.add(pM);
                                    /*
                                    A traves del arraylist pMcotiza llenamos los objetos del cual el programa nos ha podido cotizar
                                    independientemente al tipo de empresa a la cual pertenece
             /*                       *//*
            pMcotiza.add(pM);
            numObjetosCotizados++;
    //Esta es la cantidad de dispositivos que si cumplen con la cotizacion, es decir son mayores que la cotizacion
            */   cantidad++;
               }
             }
         }
        //Con esto hacemos que el arrayList placa puede ser trasladado a la siguiente interfaz con todos los elementos dentro de ella
        Disco = aux;
        if(cantidad==0){
            // Si la cantidad es 0 es por que ningún articulo cumplio con la cotización.
             JOptionPane.showMessageDialog(null," No hay dispositivos disponibles para ese presupuesto");
        }else{
            // Si hay al menos 1 articulo que sea mayor o igual al monto de cotizacion se mostrara en el siguiente interfaz a traves de una lista 
            System.out.println(" Cantidad "+ cantidad);
            MostrarArrayListDiscoDuro a = new MostrarArrayListDiscoDuro();
            a.setVisible(true);
            dispose();
        }}
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Tarjeta de video
        String cotizar = JOptionPane.showInputDialog("Ingrese la cantidad de dinero con la cual desea cotizar ");
        if(cotizar!=null){
        double cotizarD = Double.parseDouble(cotizar); 
        m.insertarEmpresasInventario();
        ArrayList<Empresa> e1 = m.getListaE();
        // Para obtener la lista de las empresas 
        JOptionPane.showMessageDialog(null,"Mostrando los dispositivos en base a la cotizacion ");
        Iterator <Empresa> it = e1.iterator();
        Empresa e = null;
        Inventario i = null;
        int cantidad=0;
        // Para almacenar los dispositivos que cumplen con el monto de la cotizacion
        ArrayList<TarjetaVideo> aux = new ArrayList<TarjetaVideo>();
        while(it.hasNext()){
          e = it.next();
          i = e.getInv();
        ArrayList<TarjetaVideo> p = new ArrayList<TarjetaVideo>();
        // El metodo es para leer en el archivo de las placas madres que se venderan por defecto en la empresa.
        i.TarjetaVideoDefecto(e);
        p = i.rescatarArrayListTarjetaVideo(e);
        Iterator<TarjetaVideo> itp = p.iterator();
        // Recorremos el arraylist de cada empresa para saber cuales son los dispositivos que cumplen con el monto digitado por el registrado
        TarjetaVideo pM = null;
            while(itp.hasNext()){
              pM = itp.next();
              if(pM.getPrecio()<=cotizarD){
                  aux.add(pM);
                                    /*
                                    A traves del arraylist pMcotiza llenamos los objetos del cual el programa nos ha podido cotizar
                                    independientemente al tipo de empresa a la cual pertenece
             /*                       *//*
            pMcotiza.add(pM);
            numObjetosCotizados++;
    //Esta es la cantidad de dispositivos que si cumplen con la cotizacion, es decir son mayores que la cotizacion
            */   cantidad++;
               }
             }
         }
        //Con esto hacemos que el arrayList placa puede ser trasladado a la siguiente interfaz con todos los elementos dentro de ella
        Tarjeta = aux;
        if(cantidad==0){
            // Si la cantidad es 0 es por que ningún articulo cumplio con la cotización.
             JOptionPane.showMessageDialog(null," No hay dispositivos disponibles para ese presupuesto");
        }else{
            // Si hay al menos 1 articulo que sea mayor o igual al monto de cotizacion se mostrara en el siguiente interfaz a traves de una lista 
            System.out.println(" Cantidad "+ cantidad);
            MostrarArrayCotizadosTarjeta a = new  MostrarArrayCotizadosTarjeta();
            a.setVisible(true);
            dispose();
        }}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // MemoriaRAM 
        String cotizar = JOptionPane.showInputDialog("Ingrese la cantidad de dinero con la cual desea cotizar ");
        if(cotizar!=null){
        double cotizarD = Double.parseDouble(cotizar); 
        m.insertarEmpresasInventario();
        ArrayList<Empresa> e1 = m.getListaE();
        // Para obtener la lista de las empresas 
        JOptionPane.showMessageDialog(null,"Mostrando los dispositivos en base a la cotizacion ");
        Iterator <Empresa> it = e1.iterator();
        Empresa e = null;
        Inventario i = null;
        int cantidad=0;
        // Para almacenar los dispositivos que cumplen con el monto de la cotizacion
        ArrayList<MemoriaRAM> aux = new ArrayList<MemoriaRAM>();
        while(it.hasNext()){
          e = it.next();
          i = e.getInv();
        ArrayList<MemoriaRAM> p = new ArrayList<MemoriaRAM>();
        // El metodo es para leer en el archivo de las placas madres que se venderan por defecto en la empresa.
        i.MemoriaRamDefecto(e);
        p =i.rescatarArrayListMemoriaRam(e);
        Iterator<MemoriaRAM> itp = p.iterator();
        // Recorremos el arraylist de cada empresa para saber cuales son los dispositivos que cumplen con el monto digitado por el registrado
        MemoriaRAM pM = null;
            while(itp.hasNext()){
              pM = itp.next();
              if(pM.getPrecio()<cotizarD){
                  aux.add(pM);
                                    /*
                                    A traves del arraylist pMcotiza llenamos los objetos del cual el programa nos ha podido cotizar
                                    independientemente al tipo de empresa a la cual pertenece
             /*                       *//*
            pMcotiza.add(pM);
            numObjetosCotizados++;
    //Esta es la cantidad de dispositivos que si cumplen con la cotizacion, es decir son mayores que la cotizacion
            */   cantidad++;
               }
             }
         }
        //Con esto hacemos que el arrayList placa puede ser trasladado a la siguiente interfaz con todos los elementos dentro de ella
        Memoria = aux;
        if(cantidad==0){
            // Si la cantidad es 0 es por que ningún articulo cumplio con la cotización.
             JOptionPane.showMessageDialog(null," No hay dispositivos disponibles para ese presupuesto");
        }else{
            // Si hay al menos 1 articulo que sea mayor o igual al monto de cotizacion se mostrara en el siguiente interfaz a traves de una lista 
            System.out.println(" Cantidad "+ cantidad);
            MostrarArrayCotizadosMemoriaRam a = new  MostrarArrayCotizadosMemoriaRam();
            a.setVisible(true);
            dispose();
        }}
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DispositivosCotizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DispositivosCotizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DispositivosCotizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DispositivosCotizar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DispositivosCotizar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
